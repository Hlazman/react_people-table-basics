{"version":3,"sources":["components/Navbar/Navbar.tsx","components/pages/HomePage.tsx","components/Loader/Loader.tsx","api.ts","components/PersonLink/PersonLink.tsx","components/pages/PeoplePage.tsx","components/pages/NotFoundPage.tsx","App.tsx","index.tsx"],"names":["Navigation","className","role","isActive","classNames","to","HomePage","Loader","getPeople","delay","Promise","resolve","setTimeout","then","fetch","response","json","PersonNavigate","person","slug","sex","name","PeoplePage","useState","people","setPeople","isLoad","setIsLoad","isError","setIsError","isEmpty","setIsEmpty","loadPeople","peopleFromServer","length","useParams","getSlug","findParent","parentName","getParent","find","parent","useEffect","map","born","died","fatherName","motherName","NotFoundPage","App","path","element","replace","index","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.0ca70cbe.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport { NavLink } from 'react-router-dom';\n\nexport const Navigation = () => {\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink\n            className={({ isActive }) => classNames('navbar-item', {\n              'has-background-grey-lighter': isActive,\n            })}\n            to=\"/\"\n          >\n            Home\n          </NavLink>\n\n          <NavLink\n            className={({ isActive }) => classNames('navbar-item', {\n              'has-background-grey-lighter': isActive,\n            })}\n            to=\"/people\"\n          >\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","export const HomePage = () => (\n  <h1 className=\"title\">Home Page</h1>\n);\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import { Link } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { Person } from '../../types';\n\ntype Props = {\n  person: Person;\n};\n\nexport const PersonNavigate: React.FC<Props> = ({ person }) => {\n  const { slug, sex, name } = person;\n\n  return (\n    <Link\n      to={`/people/${slug}`}\n      className={classNames({ 'has-text-danger': sex === 'f' })}\n    >\n      {name}\n    </Link>\n  );\n};\n","import { useParams } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport { Person } from '../../types';\nimport { Loader } from '../Loader';\nimport { getPeople } from '../../api';\nimport { PersonNavigate } from '../PersonLink/PersonLink';\n\nexport const PeoplePage = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [isLoad, setIsLoad] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const [isEmpty, setIsEmpty] = useState(false);\n\n  const loadPeople = async () => {\n    setIsLoad(true);\n\n    try {\n      const peopleFromServer = await getPeople();\n\n      if (peopleFromServer.length === 0) {\n        setIsEmpty(true);\n      }\n\n      setPeople(peopleFromServer);\n    } catch (e) {\n      setIsError(true);\n    }\n\n    setIsLoad(false);\n  };\n\n  const { getSlug = '' } = useParams();\n\n  const findParent = (parentName: string | null) => {\n    if (!parentName) {\n      return '-';\n    }\n\n    const getParent = people.find(parent => parent.name === parentName);\n\n    return getParent ? <PersonNavigate person={getParent} /> : parentName;\n  };\n\n  useEffect(() => {\n    loadPeople();\n  }, []);\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"box table-container\">\n          {isLoad && (<Loader />)}\n\n          {isError && (\n            <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n              Something went wrong\n            </p>\n          )}\n\n          {isEmpty && (\n            <p data-cy=\"noPeopleMessage\">\n              There are no people on the server\n            </p>\n          )}\n\n          { people.length > 0 && !isError && (\n            <table\n              data-cy=\"peopleTable\"\n              className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n            >\n              <thead>\n                <tr>\n                  <th>Name</th>\n                  <th>Sex</th>\n                  <th>Born</th>\n                  <th>Died</th>\n                  <th>Mother</th>\n                  <th>Father</th>\n                </tr>\n              </thead>\n\n              <tbody>\n                {\n                  people.map(person => {\n                    const {\n                      sex,\n                      born,\n                      died,\n                      fatherName,\n                      motherName,\n                      slug,\n                    } = person;\n\n                    return (\n                      <tr\n                        key={slug}\n                        data-cy=\"person\"\n                        className={\n                          classNames({\n                            'has-background-warning': getSlug === slug,\n                          })\n                        }\n                      >\n                        <td>\n                          <PersonNavigate person={person} />\n                        </td>\n\n                        <td>{sex}</td>\n                        <td>{born}</td>\n                        <td>{died}</td>\n                        <td>{findParent(motherName)}</td>\n                        <td>{findParent(fatherName)}</td>\n                      </tr>\n                    );\n                  })\n                }\n              </tbody>\n            </table>\n          )}\n\n        </div>\n      </div>\n    </>\n  );\n};\n","export const NotFoundPage = () => (\n  <h1 className=\"title\">Page not found</h1>\n);\n","import { Navigate, Route, Routes } from 'react-router-dom';\nimport './App.scss';\nimport { Navigation } from './components/Navbar/Navbar';\nimport { HomePage } from './components/pages/HomePage';\nimport { PeoplePage } from './components/pages/PeoplePage';\nimport { NotFoundPage } from './components/pages/NotFoundPage';\n\nexport const App = () => (\n  <div data-cy=\"app\">\n    <Navigation />\n\n    <main className=\"section\">\n      <div className=\"container\">\n\n        <Routes>\n          <Route path=\"/\" element={<HomePage />} />\n          <Route path=\"home\" element={<Navigate to=\"/\" replace />} />\n\n          <Route path=\"/people\">\n            <Route index element={<PeoplePage />} />\n            <Route path=\":getSlug\" element={<PeoplePage />} />\n          </Route>\n\n          <Route path=\"*\" element={<NotFoundPage />} />\n        </Routes>\n      </div>\n    </main>\n  </div>\n);\n","import { createRoot } from 'react-dom/client';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Router>\n      <App />\n    </Router>,\n  );\n"],"sourceRoot":""}